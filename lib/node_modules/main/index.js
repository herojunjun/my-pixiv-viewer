var electron = require('electron');
var fileUtil = require('main/fileUtil');

const ipcRenderer = electron.ipcRenderer;

var MainViewer = function(filepaths) {
    if (!(this instanceof MainViewer)) {
        return new MainViewer();
    }
    this.current = 0;
    this.filepaths = [];
    this.viewer = document.body;
    this.img = document.getElementById("main-image");
    this.mode = true;
};

MainViewer.prototype.check = function(no) {
    if (0 <= no && no < this.filepaths.length) {
        return true;
    }
    return false;
};

MainViewer.prototype.checkFirstPage = function(no) {
    var filepath = this.filepaths[no];
    var reg = /\/[0-9]+_[0-9]+_p[0]+\./;
    return reg.test(filepath);
};

MainViewer.prototype.up = function() {
    if (this.mode) {
        if (this.check(this.current - 1)) {
            this.current = this.current - 1;
            this.change()
        }
    } else {
        window.scrollBy(0, -60);
    }
};

MainViewer.prototype.down = function() {
    if (this.mode) {
        if (this.check(this.current + 1)) {
            this.current = this.current + 1;
            this.change()
        }
    } else {
        window.scrollBy(0, 60);
    }
};

MainViewer.prototype.right = function() {
    if (this.mode) {
        for (var i = this.current - 1; 0 <= i; i--) {
            if (this.checkFirstPage(i)) {
                this.current = i;
                this.change();
                break;
            }
        }
    } else {
        window.scrollBy(60, 0);
    }
};

MainViewer.prototype.left = function() {
    if (this.mode) {
        for (var i = this.current + 1; i < this.filepaths.length; i++) {
            if (this.checkFirstPage(i)) {
                this.current = i;
                this.change();
                break;
            }
        }
    } else {
        window.scrollBy(-60, 0);
    }
};


MainViewer.prototype.defaultSize = function() {
    if (!this.img.classList.contains("default")) {
        this.mode = true;
        this.img.classList.add("default");
        this.viewer.classList.remove("fullscreen");
    }
};

MainViewer.prototype.toggleFullSize = function() {
    if (this.img.classList.contains("default")) {
        this.mode = false;
        this.img.classList.remove("default");
        this.viewer.classList.add("fullscreen");
    } else {
        this.defaultSize();
    }
};

MainViewer.prototype.change = function() {
    var fullpath = this.filepaths[this.current]
    console.log(fullpath);
    this.img.setAttribute("src", fullpath);
    this.defaultSize();
    ipcRenderer.send('show_illust_id', fullpath.match(/[\d]+_([\d]+)_p[\d]+/)[1]);
};

var mainViewer = new MainViewer();

var mainImage = {
    up: function() {
        mainViewer.up();
    },
    down: function() {
        mainViewer.down();
    },
    right: function() {
        mainViewer.right();
    },
    left: function() {
        mainViewer.left();
    },
    defaultSize: function() {
        mainViewer.defaultSize();
    },
    fullSize: function() {
        mainViewer.toggleFullSize();
    },
};

module.exports = mainImage;

ipcRenderer.on('main_directory', function(ev, message) {
    console.log(message + "受け取った");

    fileUtil.getImageFileList(message, function(err, matches) {
        if (err) {
            console.error(err);
            return;
        }
        mainViewer.filepaths = matches;
        mainViewer.change();
    });
});
