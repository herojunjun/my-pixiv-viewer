let fs = require('fs');
let path = require('path');

let walk = function(directory, fileCallback, errorCallback, completeCallback)
{
    let fileNames = [];

    new Promise(function (resolve, reject)
    {
        fs.readdir(directory, function(error, files)
        {
            if (error)
            {
                reject('fs.readdir error');
                errorCallback(error);
                return;
            }

            fileNames = files;
            resolve();
        });
    }).then(function ()
    {
        let tasks = [];

        fileNames.forEach(function(fileName)
        {
            const filePath = path.join(directory, fileName);

            if(fs.statSync(filePath).isDirectory())
            {
                tasks.push(new Promise(function (resolve)
                {
                    // ディレクトリなら再帰
                    walk(filePath, fileCallback, errorCallback, function ()
                    {
                        resolve();
                    });
                }));
            }
            else
            {
                // ファイルならコールバックで通知
                fileCallback(filePath);
            }
        });

        return Promise.all(tasks);
    }).then(completeCallback).catch(completeCallback);
};

let fileUtil = {
    getImageFileList: function(directory, cb)
    {
        let fileList = [];
        let errorList = [];
        walk(directory,
            function (path)
            {
                if(/.*\.(jpg|png|gif)$/.test(path))
                {
                    fileList.push(path);
                }
            },
            function (error)
            {
                errorList.push(error);
            },
            function ()
            {
                if (errorList.length !== 0)
                {
                    cb(errorList, null);
                }
                cb(null, fileList);
            });
    },
};

module.exports = fileUtil;
